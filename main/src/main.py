# -*- coding: utf-8 -*-
"""
T·ªáp m√£ ngu·ªìn ch√≠nh cho Nhi·ªám v·ª• 2: Khai ph√° tri th·ª©c t·ª´ vƒÉn b·∫£n k·ªπ thu·∫≠t.

ƒê√¢y l√† ƒëi·ªÉm kh·ªüi ƒë·∫ßu (entry point) c·ªßa ch∆∞∆°ng tr√¨nh, ch·ªãu tr√°ch nhi·ªám:
1. Ph√¢n t√≠ch c√°c tham s·ªë d√≤ng l·ªánh (--mode, --task).
2. ƒêi·ªÅu ph·ªëi (orchestrate) c√°c t√°c v·ª• b·∫±ng c√°ch g·ªçi c√°c module x·ª≠ l√Ω t∆∞∆°ng ·ª©ng.
"""
import argparse
import sys
import shutil
from pathlib import Path

# Th√™m th∆∞ m·ª•c g·ªëc c·ªßa project v√†o sys.path ƒë·ªÉ import c√°c module kh√°c c·∫•p
project_root = Path(__file__).resolve().parent.parent.parent
sys.path.insert(0, str(project_root))

from main.extract_pdf import PDFToMarkdownConverter as PDFExtractor
from main.src.embedding.model import DenseEmbedding
from main.src.vectordb.qdrant import VectorStore
from main.src.utils.indexer import index_extracted_data
# from main.src.llm.chat import QAHandler
from main.src.answer_generator import QAHandler, AnswerGenerator

def setup_paths(mode: str) -> dict:
    """Thi·∫øt l·∫≠p v√† x√°c th·ª±c c√°c ƒë∆∞·ªùng d·∫´n input v√† output."""
    # X·ª≠ l√Ω c·∫•u tr√∫c th∆∞ m·ª•c kh√°c nhau
    if mode == "public":
        base_input_dir = project_root / f"main/data/{mode}_test_input/{mode}-test-input"
    elif mode == "private":
        base_input_dir = project_root / f"main/data/{mode}_test_input/{mode}_test_input"
    else:  # training
        base_input_dir = project_root / f"main/data/{mode}_test_input/{mode}_input"

    output_dir = project_root / f"output/{mode}_test_output"

    output_dir.mkdir(parents=True, exist_ok=True)

    try:
        # T√¨m file question.csv trong t·∫•t c·∫£ th∆∞ m·ª•c con
        question_csv_path = next(base_input_dir.rglob("question.csv"))
    except StopIteration:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng: Kh√¥ng t√¨m th·∫•y 'question.csv' trong th∆∞ m·ª•c '{base_input_dir}'.")
        sys.exit(1)

    paths = {
        "pdf_dir": base_input_dir,
        "question_csv": question_csv_path,
        "output_dir": output_dir,
        "zip_name": f"{mode}_test_output.zip"
    }
    
    print("\n--- C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n ---")
    for key, value in paths.items():
        try:
            print(f"{key:<15}: {Path(value).relative_to(project_root)}")
        except (TypeError, ValueError):
            print(f"{key:<15}: {value}")
    print("---------------------------\n")

    return paths

def run_task_extract(paths: dict) -> bool:
    """Ch·∫°y t√°c v·ª• tr√≠ch xu·∫•t PDF b·∫±ng module extract_pdf.py v√† index d·ªØ li·ªáu."""
    print("\n" + "="*25 + " B·∫ÆT ƒê·∫¶U T√ÅC V·ª§ EXTRACT " + "="*25)
    
    from main.extract_pdf import PDFToMarkdownConverter  # d√πng converter m·ªõi

    converter = PDFToMarkdownConverter()
    input_dir = Path(paths["pdf_dir"])
    
    # Output s·∫Ω n·∫±m trong: output/public_test_output/
    base_output_dir = Path(paths["output_dir"])
    base_output_dir.mkdir(parents=True, exist_ok=True)

    extracted_data = {}

    for pdf_file in input_dir.glob("*.pdf"):
        # M·ªói file PDF c√≥ th∆∞ m·ª•c ri√™ng: output/public_test_output/<PDF_NAME>/images/
        pdf_output_dir = base_output_dir / pdf_file.stem / "images"
        pdf_output_dir.mkdir(parents=True, exist_ok=True)

        try:
            md_path = converter.convert_pdf_to_markdown(str(pdf_file), str(pdf_output_dir))
            # L∆∞u text markdown ƒë√£ tr√≠ch xu·∫•t ƒë·ªÉ index
            if md_path and Path(md_path).exists():
                extracted_data[pdf_file.stem] = Path(md_path).read_text(encoding="utf-8")
            print(f"‚úÖ Tr√≠ch xu·∫•t th√†nh c√¥ng: {pdf_file.name}")
        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω {pdf_file.name}: {e}")
            import traceback
            traceback.print_exc()

    if not extracted_data:
        print("‚ùå Kh√¥ng c√≥ file PDF n√†o ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng.")
        return False

    # Index d·ªØ li·ªáu v√†o vector DB (gi·ªØ nguy√™n pipeline c≈©)
    embedding_model = DenseEmbedding()
    collection_name = f"collection_{paths['pdf_dir'].name}"
    vector_db = VectorStore(collection_name, embedding_model)
    index_extracted_data(extracted_data, vector_db)

    print("\n" + "="*24 + " HO√ÄN TH√ÄNH T√ÅC V·ª§ EXTRACT " + "="*24)
    return True


def run_task_qa(paths: dict):
    """Ch·∫°y t√°c v·ª• tr·∫£ l·ªùi c√¢u h·ªèi v√† t·∫°o file n·ªôp b√†i."""
    print("\n" + "="*28 + " B·∫ÆT ƒê·∫¶U T√ÅC V·ª§ QA " + "="*28)
    
    embedding_model = DenseEmbedding()
    collection_name = f"collection_{paths['pdf_dir'].name}"
    vector_db = VectorStore(collection_name, embedding_model)
    qa_handler = QAHandler(vector_db)

    # ƒê·ªçc l·∫°i d·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t t·ª´ c√°c file main.md
    extracted_data = {}
    output_dir_path = Path(paths["output_dir"])
    
    print(f"üîç T√¨m ki·∫øm d·ªØ li·ªáu trong: {output_dir_path}")
    
    for subdir in output_dir_path.iterdir():
        if subdir.is_dir():
            # T√¨m main.md trong th∆∞ m·ª•c g·ªëc tr∆∞·ªõc
            main_md = subdir / "main.md"
            if main_md.exists():
                print(f"‚úÖ T√¨m th·∫•y: {subdir.name}/main.md")
                extracted_data[subdir.name] = main_md.read_text(encoding='utf-8')
            else:
                # T√¨m main.md trong th∆∞ m·ª•c images (fallback)
                images_md = subdir / "images" / "main.md"
                if images_md.exists():
                    print(f"‚úÖ T√¨m th·∫•y: {subdir.name}/images/main.md")
                    extracted_data[subdir.name] = images_md.read_text(encoding='utf-8')
                else:
                    print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y main.md trong {subdir.name}")

    if not extracted_data:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t trong '{output_dir_path}'.")
        print("Vui l√≤ng ch·∫°y t√°c v·ª• 'extract' tr∆∞·ªõc.")
        return

    print(f"üìä ƒê√£ t√¨m th·∫•y {len(extracted_data)} file d·ªØ li·ªáu")

    # Tr·∫£ l·ªùi c√¢u h·ªèi
    qa_results = qa_handler.process_questions_csv(paths["question_csv"])
    if qa_results is None:
        return

    # T·∫°o file k·∫øt qu·∫£ v√† ƒë√≥ng g√≥i
    generator = AnswerGenerator(output_dir_path)
    generator.generate_answer_md(extracted_data, qa_results)
    
    # Copy file main.py n√†y v√†o th∆∞ m·ª•c output tr∆∞·ªõc khi n√©n
    this_script_path = project_root / "main" / "src" / "main.py"
    shutil.copy(this_script_path, output_dir_path / "main.py")
    
    generator.create_zip(paths["zip_name"])
    
    print("\n" + "="*27 + " HO√ÄN TH√ÄNH T√ÅC V·ª§ QA " + "="*27)

def main():
    """H√†m ch√≠nh, ph√¢n t√≠ch tham s·ªë v√† ƒëi·ªÅu ph·ªëi pipeline."""
    parser = argparse.ArgumentParser(description="Pipeline cho Nhi·ªám v·ª• 2 - Zalo AI Challenge")
    parser.add_argument(
        "--mode", type=str, choices=["public", "private", "training"], default="public",
        help="Ch·∫ø ƒë·ªô ch·∫°y: public, private ho·∫∑c training."
    )
    parser.add_argument(
        "--task", type=str, choices=["extract", "qa", "full"], default="full",
        help="T√°c v·ª• c·∫ßn th·ª±c hi·ªán: extract, qa, ho·∫∑c full."
    )
    args = parser.parse_args()
    
    print("\n" + "*"*80)
    print(f" B·∫ÆT ƒê·∫¶U PIPELINE - CH·∫æ ƒê·ªò: {args.mode.upper()} - T√ÅC V·ª§: {args.task.upper()} ".center(80, '*'))
    print("*"*80)

    paths = setup_paths(args.mode)

    if args.task == "extract":
        run_task_extract(paths)
    elif args.task == "qa":
        run_task_qa(paths)
    elif args.task == "full":
        if run_task_extract(paths):
            run_task_qa(paths)
            
    print("\n" + "*"*80)
    print(f" PIPELINE K·∫æT TH√öC ".center(80, '*'))
    print("*"*80 + "\n")

if __name__ == "__main__":
    main()
