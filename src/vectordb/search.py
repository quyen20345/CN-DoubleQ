# src/vectordb/search.py
"""
Module n√†y cung c·∫•p c√°c ch·ª©c nƒÉng t√¨m ki·∫øm n√¢ng cao tr√™n Qdrant,
bao g·ªìm t√¨m ki·∫øm vector ƒë∆°n gi·∫£n v√† c√°c chi·∫øn l∆∞·ª£c ph·ª©c t·∫°p h∆°n nh∆∞ MMR
ƒë·ªÉ tƒÉng s·ª± ƒëa d·∫°ng c·ªßa k·∫øt qu·∫£.
"""
from typing import List, Any
from qdrant_client.models import ScoredPoint
from .store import VectorStore

def search(query: str, vector_store: VectorStore, top_k: int = 5, threshold: float = 0.3) -> List[ScoredPoint]:
    """
    Th·ª±c hi·ªán t√¨m ki·∫øm vector trong collection.

    Args:
        query (str): C√¢u truy v·∫•n t√¨m ki·∫øm.
        vector_store (VectorStore): Kho vector ƒë·ªÉ t√¨m ki·∫øm.
        top_k (int): S·ªë l∆∞·ª£ng k·∫øt qu·∫£ h√†ng ƒë·∫ßu c·∫ßn tr·∫£ v·ªÅ.
        threshold (float): Ng∆∞·ª°ng ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng t·ªëi thi·ªÉu.

    Returns:
        List[ScoredPoint]: Danh s√°ch c√°c k·∫øt qu·∫£ t√¨m th·∫•y.
    """
    print(f"üîç ƒêang t√¨m ki·∫øm v·ªõi truy v·∫•n: '{query[:50]}...'")
    
    # 1. Embed c√¢u truy v·∫•n
    query_vector = vector_store.embedding_model.encode(query)
    
    # 2. Th·ª±c hi·ªán t√¨m ki·∫øm trong Qdrant
    search_results = vector_store.client.search(
        collection_name=vector_store.collection_name,
        query_vector=query_vector,
        limit=top_k,
        score_threshold=threshold,
        with_payload=True  # L·∫•y c·∫£ payload (n·ªôi dung, ngu·ªìn,...)
    )
    
    print(f"  - T√¨m th·∫•y {len(search_results)} k·∫øt qu·∫£ ph√π h·ª£p.")
    return search_results
