# src/pipeline/tasks.py
"""
Module n√†y ƒëi·ªÅu ph·ªëi c√°c t√°c v·ª• ch√≠nh c·ªßa pipeline: extract v√† qa.
"""
import traceback
import json
from pathlib import Path

from src.data_processing.pdf_parser import PDFMarkdownConverter
from src.embedding.model import EmbeddingModel
from src.vectordb.store import VectorStore
from src.vectordb.indexer import index_documents
from src.rag_system.qa_handler import QAHandler
from src.rag_system.retriever import HybridRetriever
from .output_generator import OutputGenerator

def run_extract_task(paths: dict) -> bool:
    """
    Ch·∫°y t√°c v·ª• tr√≠ch xu·∫•t: ƒë·ªçc PDF, chunk, embed, v√† index.
    L∆∞u l·∫°i corpus ƒë·ªÉ t√°c v·ª• QA c√≥ th·ªÉ s·ª≠ d·ª•ng cho BM25.
    """
    print("\n" + "="*25 + " B·∫ÆT ƒê·∫¶U T√ÅC V·ª§ EXTRACT " + "="*25)
    input_dir = Path(paths["pdf_dir"])
    output_dir = Path(paths["output_dir"])
    corpus_path = output_dir / "corpus.json"
    
    converter = PDFMarkdownConverter()
    extracted_data = {}

    pdf_files = list(input_dir.glob("*.pdf"))
    if not pdf_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file PDF n√†o trong: {input_dir}")
        return False

    for pdf in pdf_files:
        pdf_output_sub_dir = output_dir / pdf.stem
        try:
            md_content, image_count = converter.convert(pdf, pdf_output_sub_dir)
            extracted_data[pdf.stem] = md_content
            print(f"‚úÖ Tr√≠ch xu·∫•t th√†nh c√¥ng: {pdf.name} ({image_count} ·∫£nh)")
        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω {pdf.name}: {e}")
            traceback.print_exc()

    if not extracted_data:
        print("‚ùå Kh√¥ng c√≥ file PDF n√†o ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng.")
        return False

    embedding_model = EmbeddingModel()
    collection_name = f"collection_{input_dir.name}"
    vector_db = VectorStore(collection_name, embedding_model)
    
    # Index d·ªØ li·ªáu v√† l·∫•y l·∫°i corpus
    corpus_for_bm25 = index_documents(extracted_data, vector_db)

    # L∆∞u corpus cho t√°c v·ª• QA
    with open(corpus_path, 'w', encoding='utf-8') as f:
        json.dump(corpus_for_bm25, f, ensure_ascii=False, indent=2)
    print(f"üíæ ƒê√£ l∆∞u corpus cho BM25 v√†o: {corpus_path}")

    print("\n" + "="*24 + " HO√ÄN TH√ÄNH T√ÅC V·ª§ EXTRACT " + "="*24)
    return True

def run_qa_task(paths: dict):
    """
    Ch·∫°y t√°c v·ª• tr·∫£ l·ªùi c√¢u h·ªèi: t·∫£i corpus, kh·ªüi t·∫°o retriever, v√† x·ª≠ l√Ω c√¢u h·ªèi.
    """
    print("\n" + "="*28 + " B·∫ÆT ƒê·∫¶U T√ÅC V·ª§ QA " + "="*28)
    output_dir = Path(paths["output_dir"])
    corpus_path = output_dir / "corpus.json"

    # T·∫£i corpus ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω t·ª´ t√°c v·ª• extract
    if not corpus_path.exists():
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file corpus.json. Vui l√≤ng ch·∫°y t√°c v·ª• 'extract' tr∆∞·ªõc.")
        return
    with open(corpus_path, 'r', encoding='utf-8') as f:
        corpus_data = json.load(f)
    
    if not corpus_data:
        print("‚ùå D·ªØ li·ªáu corpus tr·ªëng. Kh√¥ng th·ªÉ ti·∫øp t·ª•c.")
        return

    # Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt
    embedding_model = EmbeddingModel()
    collection_name = f"collection_{Path(paths['pdf_dir']).name}"
    vector_db = VectorStore(collection_name, embedding_model)
    
    # Kh·ªüi t·∫°o Hybrid Retriever
    retriever = HybridRetriever(vector_db, corpus_data)
    
    # Kh·ªüi t·∫°o QA Handler v·ªõi retriever
    qa_handler = QAHandler(retriever)
    
    # X·ª≠ l√Ω c√°c c√¢u h·ªèi
    qa_results = qa_handler.process_questions_csv(paths["question_csv"])
    if qa_results is None:
        return

    # T·∫°o file output
    generator = OutputGenerator(output_dir)
    # L·∫•y l·∫°i d·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t t·ª´ c√°c file main.md ƒë·ªÉ t·∫°o output
    extracted_md_data = {}
    for subdir in output_dir.iterdir():
        if subdir.is_dir():
            md_file = subdir / "main.md"
            if md_file.exists():
                extracted_md_data[subdir.name] = md_file.read_text(encoding="utf-8")

    generator.generate_final_output(extracted_md_data, qa_results, paths["zip_name"])
    
    print("\n" + "="*27 + " HO√ÄN TH√ÄNH T√ÅC V·ª§ QA " + "="*27)

