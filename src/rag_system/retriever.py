# src/rag_system/retriever.py
"""
Module n√†y ch·ª©a Tr√¨nh truy xu·∫•t lai (Hybrid Retriever), k·∫øt h·ª£p
s·ª©c m·∫°nh c·ªßa t√¨m ki·∫øm t·ª´ kh√≥a (BM25) v√† t√¨m ki·∫øm ng·ªØ nghƒ©a (Vector Search)
ƒë·ªÉ l·∫•y ra c√°c t√†i li·ªáu li√™n quan nh·∫•t.
"""

from rank_bm25 import BM25Okapi
from typing import List, Dict

from src.vectordb.store import VectorStore

class HybridRetriever:
    """
    K·∫øt h·ª£p BM25 v√† Vector Search ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin.
    """
    def __init__(self, vector_store: VectorStore, corpus_data: List[Dict[str, str]]):
        """
        Kh·ªüi t·∫°o retriever.
        
        Args:
            vector_store: Instance c·ªßa VectorStore (Qdrant).
            corpus_data: Danh s√°ch c√°c dict, m·ªói dict ch·ª©a {'content': str, 'source': str}.
        """
        self.vector_store = vector_store
        self.corpus_data = corpus_data
        
        # Ch·ªâ l·∫•y ph·∫ßn 'content' ƒë·ªÉ t·∫°o corpus cho BM25
        tokenized_corpus = [doc["content"].split(" ") for doc in self.corpus_data]
        self.bm25 = BM25Okapi(tokenized_corpus)
        print(f"‚úÖ Kh·ªüi t·∫°o BM25 index th√†nh c√¥ng v·ªõi {len(self.corpus_data)} t√†i li·ªáu.")

    def _reciprocal_rank_fusion(self, ranked_lists: List[List[str]], k: int = 60) -> Dict[str, float]:
        """
        Th·ª±c hi·ªán Reciprocal Rank Fusion ƒë·ªÉ k·∫øt h·ª£p c√°c danh s√°ch k·∫øt qu·∫£.
        """
        rrf_scores = {}
        for doc_list in ranked_lists:
            for rank, doc_id in enumerate(doc_list):
                if doc_id not in rrf_scores:
                    rrf_scores[doc_id] = 0
                rrf_scores[doc_id] += 1.0 / (k + rank + 1)
        
        return rrf_scores

    def retrieve(self, query: str, top_k: int = 10) -> List[Dict[str, str]]:
        """
        Th·ª±c hi·ªán t√¨m ki·∫øm lai v√† tr·∫£ v·ªÅ top_k k·∫øt qu·∫£ t·ªët nh·∫•t.
        
        Args:
            query: C√¢u h·ªèi ho·∫∑c chu·ªói truy v·∫•n.
            top_k: S·ªë l∆∞·ª£ng t√†i li·ªáu c·∫ßn tr·∫£ v·ªÅ.
            
        Returns:
            Danh s√°ch c√°c t√†i li·ªáu (d·∫°ng dict) li√™n quan nh·∫•t.
        """
        print(f"\nüîç B·∫Øt ƒë·∫ßu t√¨m ki·∫øm lai cho query: '{query[:100]}...'")
        
        # 1. T√¨m ki·∫øm b·∫±ng Vector Search (Semantic)
        vector_results = self.vector_store.search(query, top_k=top_k, threshold=0.2)
        vector_doc_ids = [res.payload['content'] for res in vector_results if res.payload]
        print(f"  - Vector Search t√¨m th·∫•y {len(vector_doc_ids)} k·∫øt qu·∫£.")

        # 2. T√¨m ki·∫øm b·∫±ng BM25 (Keyword)
        tokenized_query = query.split(" ")
        bm25_results = self.bm25.get_top_n(tokenized_query, [doc["content"] for doc in self.corpus_data], n=top_k)
        bm25_doc_ids = [content for content in bm25_results]
        print(f"  - BM25 Search t√¨m th·∫•y {len(bm25_doc_ids)} k·∫øt qu·∫£.")
        
        # 3. K·∫øt h·ª£p k·∫øt qu·∫£ b·∫±ng RRF
        fused_scores = self._reciprocal_rank_fusion([vector_doc_ids, bm25_doc_ids])
        
        # S·∫Øp x·∫øp c√°c t√†i li·ªáu d·ª±a tr√™n ƒëi·ªÉm RRF
        sorted_doc_ids = sorted(fused_scores.keys(), key=lambda x: fused_scores[x], reverse=True)
        
        # L·∫•y top_k t√†i li·ªáu duy nh·∫•t t·ª´ corpus g·ªëc
        final_results = []
        seen_content = set()
        for doc_id in sorted_doc_ids:
            if doc_id not in seen_content:
                # T√¨m t√†i li·ªáu g·ªëc trong corpus
                original_doc = next((doc for doc in self.corpus_data if doc["content"] == doc_id), None)
                if original_doc:
                    final_results.append(original_doc)
                    seen_content.add(doc_id)
            if len(final_results) >= top_k:
                break
        
        print(f"  - Sau khi k·∫øt h·ª£p, tr·∫£ v·ªÅ {len(final_results)} t√†i li·ªáu t·ªët nh·∫•t.")
        return final_results
